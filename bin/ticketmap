#!/usr/bin/env ruby
require 'rubygems'
require 'ramaze'
$LOAD_PATH.unshift __DIR__("../")
require 'controller/init.rb'

module TicketMap
  include Innate::Optioned
  VERSION = "0.1.0.3rc"

  options.dsl do
    o "Path of config file", 
      :config, File.expand_path("~/.ticketmap.rb") 
    o "Path of database file",
      :db, File.expand_path("~/.ticketmap.db")
    o "Port number", 
      :port, 7007
    o "Interval to automatically move tickets (hours)",
      :shake_interval, 24
    o "Distance to automatically move tickets (pixels)",
      :shake_distance, 8
    o "Width of the board (pixels)",
      :board_width, 600
    o "Height of the board (pixels)",
      :board_height, 600
  end

  def self.parse_argv!
    OptionParser.new{|o|
      o.on("--config PATH"){|path|
        TicketMap.options[:config] = path
      }
      o.on("--db DB_PATH"){|path| 
        TicketMap.options[:db] = File.expand_path(path, Dir.pwd)
      }
      o.on("--port N"){|port|
        TicketMap.options[:port] = port
      }
      o.on("--version"){ puts VERSION; exit }
      o.on("--help"){ puts o.to_s; exit }
    }.parse!(ARGV)
  end

  def self.load_conf(conf)
    if File.exist?(conf)
      Ramaze::Log.info("Loading config file: #{conf}")
      require conf
    else
      Ramaze::Log.warn("Config file not found: #{conf}")
    end
  end

  def self.load_models(db)
    Ramaze::Log.info("Loading database: #{db}")
    require __DIR__('../model/init.rb')
  end

  def self.start(port)
    Ramaze::Log.info("Starting server with port #{port}")
    Ramaze.start :port => port,
                 :root => __DIR__('../')
  end
end

TicketMap.parse_argv!

TicketMap.load_conf(TicketMap.options[:config])
TicketMap.load_models(TicketMap.options[:db])
TicketMap.start(TicketMap.options[:port])
